// Sistema de Examen Personalizado - Versi√≥n Gen√©rica
const readline = require('readline');
const fs = require('fs');
const { google } = require('googleapis');
const path = require('path');
require('dotenv').config();

// Configuraci√≥n de APIs
const AI_API_KEY = process.env.AI_API_KEY;
const GOOGLE_DOCUMENT_ID = process.env.GOOGLE_DOCUMENT_ID;

// Configurar autenticaci√≥n de Google
const auth = new google.auth.GoogleAuth({
  keyFile: path.join(__dirname, 'credentials.json'),
  scopes: ['https://www.googleapis.com/auth/documents.readonly']
});

const docs = google.docs({ version: 'v1', auth });

// Configuraci√≥n de la terminal
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Configuraci√≥n de materia (configurable)
const MATERIA_CONFIG = {
  nombre: process.env.SUBJECT_NAME || 'MATERIA DE ESTUDIO',
  emoji: process.env.SUBJECT_EMOJI || 'üìö',
  duracion: process.env.EXAM_DURATION || '2 horas',
  formato: process.env.EXAM_FORMAT || 'Tipo test (60%) + Preguntas escritas (40%)',
  penalizacion: process.env.PENALTY || '1/4 punto por error',
  aprobado: parseFloat(process.env.PASSING_GRADE) || 5.0,
  maxPreguntas: parseInt(process.env.MAX_QUESTIONS) || 20
};

// Estado del examen
let estadoActual = {
  preguntas: [],
  preguntaActual: 0,
  respuestas: [],
  inicio: null,
  puntuacion: 0,
  correctas: 0,
  incorrectas: 0,
  saltadas: 0
};

// üìñ FUNCIONES DE GOOGLE DOCS
async function obtenerPreguntasDelDocumento() {
  try {
    console.log(`üìñ Obteniendo preguntas del documento...`);
    
    if (!GOOGLE_DOCUMENT_ID) {
      throw new Error('No se encontr√≥ ID de documento configurado');
    }

    const response = await docs.documents.get({
      documentId: GOOGLE_DOCUMENT_ID
    });

    const document = response.data;
    let textoCompleto = '';

    // Extraer texto del documento
    document.body.content.forEach(element => {
      if (element.paragraph) {
        element.paragraph.elements.forEach(textElement => {
          if (textElement.textRun) {
            textoCompleto += textElement.textRun.content;
          }
        });
      }
    });

    // Procesar preguntas seg√∫n formato configurado
    const lineas = textoCompleto.split('\n');
    const preguntas = [];
    const formatoPregunta = process.env.QUESTION_FORMAT || 'default';

    for (let i = 0; i < lineas.length; i++) {
      let pregunta = '';
      let esPregunta = false;
      const linea = lineas[i].trim();

      // Detectar preguntas seg√∫n diferentes formatos
      if (formatoPregunta === 'asterisk' && linea.endsWith('*') && linea.length > 10) {
        pregunta = linea.slice(0, -1).trim();
        esPregunta = contienePatronPregunta(pregunta);
      } else if (formatoPregunta === 'numbered' && /^Q\d+\.\s/.test(linea)) {
        pregunta = linea.replace(/^Q\d+\.\s/, '').trim();
        esPregunta = contienePatronPregunta(pregunta);
      } else if (formatoPregunta === 'default' && contienePatronPregunta(linea)) {
        pregunta = linea;
        esPregunta = true;
      }
      
      if (esPregunta && pregunta.length >= 15) {
        preguntas.push(pregunta);
        console.log(`‚úÖ Pregunta encontrada: ${pregunta.substring(0, 60)}...`);
      }
    }

    console.log(`üìä Total de preguntas encontradas: ${preguntas.length}`);
    return preguntas;

  } catch (error) {
    console.log(`‚ùå Error obteniendo preguntas:`, error.message);
    return [];
  }
}

function contienePatronPregunta(texto) {
  return texto.includes('?') ||
    /\b(cu√°l|c√≥mo|qu√©|d√≥nde|por qu√©|cu√°ndo|cu√°ntos|cu√°ntas|define|explica|describe)\b/i.test(texto);
}

// ü§ñ Funci√≥n para llamar a la API de IA
async function llamarIA(prompt, maxTokens = 1200, reintentos = 3) {
  const apiEndpoint = process.env.AI_API_ENDPOINT || 'https://api.openai.com/v1/chat/completions';
  const modelo = process.env.AI_MODEL || 'gpt-3.5-turbo';

  const payload = {
    model: modelo,
    messages: [{ role: "user", content: prompt }],
    temperature: 0.7,
    max_tokens: maxTokens,
    stream: false
  };

  for (let intento = 1; intento <= reintentos; intento++) {
    try {
      console.log(`ü§ñ Generando opciones con IA (intento ${intento}/${reintentos})...`);
      
      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${AI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.choices?.[0]?.message?.content) {
        throw new Error('Respuesta vac√≠a de la IA');
      }
      
      return result.choices[0].message.content.trim();

    } catch (error) {
      console.log(`‚ùå Error en intento ${intento}:`, error.message);
      if (intento === reintentos) {
        throw error;
      }
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

// üß† Generar opciones para pregunta espec√≠fica
async function generarOpcionesParaPregunta(preguntaTexto) {
  const contextoMateria = process.env.SUBJECT_CONTEXT || 'materia acad√©mica';
  
  const prompt = `Eres un profesor universitario experto en ${contextoMateria} creando opciones de respuesta para un examen acad√©mico.

PREGUNTA: ${preguntaTexto}

INSTRUCCIONES:
1. Crea exactamente 4 opciones de respuesta (A, B, C, D) que sean:
   - T√©cnicamente precisas y del nivel universitario apropiado
   - Plausibles pero con solo UNA correcta
   - Que incluyan terminolog√≠a espec√≠fica de la materia
   - Distractores cre√≠bles basados en conocimiento parcial

2. Las opciones incorrectas deben ser:
   - Conceptos relacionados pero incorrectos en este contexto
   - Distractores cre√≠bles que un estudiante podr√≠a considerar
   - No completamente absurdas o irrelevantes

3. La explicaci√≥n debe:
   - Justificar claramente por qu√© la respuesta es correcta
   - Explicar por qu√© las otras opciones son incorrectas
   - Incluir el concepto o mecanismo subyacente
   - Usar terminolog√≠a t√©cnica apropiada

4. IMPORTANTE: La respuesta correcta debe estar distribuida aleatoriamente entre A, B, C, D.

FORMATO EXACTO REQUERIDO:
A) [opci√≥n espec√≠fica y t√©cnicamente precisa]
B) [opci√≥n espec√≠fica y t√©cnicamente precisa]
C) [opci√≥n espec√≠fica y t√©cnicamente precisa]
D) [opci√≥n espec√≠fica y t√©cnicamente precisa]
CORRECTA: [A/B/C/D]
EXPLICACION: [explicaci√≥n detallada cient√≠ficamente fundamentada]`;

  try {
    const respuesta = await llamarIA(prompt, 1200);
    return parsearRespuestaIA(respuesta, preguntaTexto);
  } catch (error) {
    console.log('‚ùå Error generando opciones con IA');
    throw error;
  }
}

// üìù Parser de respuesta de IA
function parsearRespuestaIA(texto, preguntaTexto) {
  try {
    console.log('üîç Procesando respuesta de IA...');
    
    let textoLimpio = texto.replace(/\r\n/g, '\n').replace(/\r/g, '\n').trim();
    let opciones = [];
    let correctaIndex = -1;
    let explicacion = '';
    
    // Extraer opciones con regex
    const regexOpciones = /^([A-D])\)\s*(.+?)(?=\n[A-D]\)|$)/gim;
    let matches = [...textoLimpio.matchAll(regexOpciones)];
    
    if (matches.length === 4) {
      matches.forEach(match => {
        const indice = match[1].charCodeAt(0) - 65;
        opciones[indice] = match[2].trim();
      });
    } else {
      throw new Error('No se pudieron extraer 4 opciones v√°lidas');
    }
    
    // Buscar respuesta correcta
    const patronesCorrecta = [
      /CORRECTA:\s*([A-D])/i,
      /RESPUESTA:\s*([A-D])/i,
      /La respuesta correcta es\s*([A-D])/i
    ];
    
    for (const patron of patronesCorrecta) {
      const match = textoLimpio.match(patron);
      if (match) {
        correctaIndex = match[1].toUpperCase().charCodeAt(0) - 65;
        break;
      }
    }
    
    if (correctaIndex === -1) {
      correctaIndex = Math.floor(Math.random() * 4);
    }
    
    // Buscar explicaci√≥n
    const patronExplicacion = /EXPLICACION:\s*([\s\S]+?)$/i;
    const matchExplicacion = textoLimpio.match(patronExplicacion);
    if (matchExplicacion) {
      explicacion = matchExplicacion[1].trim().substring(0, 500);
    } else {
      explicacion = `Respuesta correcta: ${String.fromCharCode(65 + correctaIndex)}`;
    }
    
    return {
      pregunta: preguntaTexto,
      opciones: opciones,
      correcta: correctaIndex,
      explicacion: explicacion,
      fuente: 'Documento + IA'
    };

  } catch (error) {
    console.log(`‚ùå Error en parseo: ${error.message}`);
    throw error;
  }
}

// üéØ Generar examen completo
async function generarExamenCompleto(numPreguntas = null) {
  console.log(`\nüéØ GENERANDO EXAMEN DE ${MATERIA_CONFIG.nombre} ${MATERIA_CONFIG.emoji}`);
  console.log(`üìã Formato: ${MATERIA_CONFIG.formato}`);
  console.log(`‚ö†Ô∏è  Penalizaci√≥n: ${MATERIA_CONFIG.penalizacion}`);
  
  // Obtener preguntas del documento
  console.log('\nüìñ Obteniendo preguntas del documento...');
  const preguntasDocumento = await obtenerPreguntasDelDocumento();
  
  if (preguntasDocumento.length === 0) {
    console.log('‚ùå No se pudieron obtener preguntas del documento.');
    return null;
  }
  
  const totalPreguntas = numPreguntas || Math.min(preguntasDocumento.length, MATERIA_CONFIG.maxPreguntas);
  console.log(`üìä Preguntas disponibles: ${preguntasDocumento.length}`);
  console.log(`üé≤ Seleccionando: ${totalPreguntas} preguntas`);
  
  // Mezclar y seleccionar preguntas
  const preguntasSeleccionadas = [...preguntasDocumento]
    .sort(() => Math.random() - 0.5)
    .slice(0, totalPreguntas);
  
  console.log('\n‚è≥ Generando opciones de respuesta...\n');

  const preguntasCompletas = [];
  const preguntasFallidas = [];
  
  for (let i = 0; i < preguntasSeleccionadas.length; i++) {
    const preguntaTexto = preguntasSeleccionadas[i];
    
    try {
      console.log(`üîÑ Procesando pregunta ${i + 1}/${totalPreguntas}`);
      
      const preguntaCompleta = await generarOpcionesParaPregunta(preguntaTexto);
      preguntasCompletas.push({
        ...preguntaCompleta,
        numero: i + 1
      });
      
      console.log(`‚úÖ Pregunta ${i + 1} completada`);
      
      // Pausa para no saturar la API
      if (i < preguntasSeleccionadas.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
    } catch (error) {
      console.log(`‚ùå Error en pregunta ${i + 1}, saltando...`);
      preguntasFallidas.push({
        numero: i + 1,
        pregunta: preguntaTexto,
        error: error.message
      });
    }
  }

  if (preguntasCompletas.length === 0) {
    console.log('‚ùå No se pudo generar ninguna pregunta v√°lida');
    return null;
  }

  // Guardar examen
  const nombreArchivo = `examen_${Date.now()}.json`;
  fs.writeFileSync(nombreArchivo, JSON.stringify(preguntasCompletas, null, 2));
  
  console.log(`\n‚úÖ EXAMEN GENERADO EXITOSAMENTE`);
  console.log(`üíæ Guardado en: ${nombreArchivo}`);
  console.log(`üìä Estad√≠sticas:`);
  console.log(`   Preguntas exitosas: ${preguntasCompletas.length}`);
  console.log(`   Preguntas fallidas: ${preguntasFallidas.length}`);

  return preguntasCompletas;
}

// üéÆ Sistema de examen interactivo
async function iniciarExamenInteractivo(preguntas) {
  estadoActual.preguntas = preguntas;
  estadoActual.inicio = Date.now();
  estadoActual.preguntaActual = 0;
  
  console.log('\nüéØ INICIANDO EXAMEN INTERACTIVO');
  console.log('üìñ Instrucciones:');
  console.log('   ‚Ä¢ Presiona A, B, C, D para responder');
  console.log('   ‚Ä¢ Presiona ESPACIO para saltar pregunta');
  console.log('   ‚Ä¢ Presiona Q para terminar examen');
  console.log('\n‚è≥ Presiona ENTER para comenzar...');
  
  await esperarEnter();
  mostrarPreguntaActual();
}

function mostrarPreguntaActual() {
  if (estadoActual.preguntaActual >= estadoActual.preguntas.length) {
    finalizarExamen();
    return;
  }

  const p = estadoActual.preguntas[estadoActual.preguntaActual];
  const progreso = `[${estadoActual.preguntaActual + 1}/${estadoActual.preguntas.length}]`;
  
  console.clear();
  console.log(`\nüéØ EXAMEN DE ${MATERIA_CONFIG.nombre} ${progreso}`);
  console.log(`‚è±Ô∏è  Tiempo: ${Math.floor((Date.now() - estadoActual.inicio) / 60000)} min`);
  console.log(`üìä Correctas: ${estadoActual.correctas} | Incorrectas: ${estadoActual.incorrectas} | Saltadas: ${estadoActual.saltadas}`);
  console.log(`\nüìã PREGUNTA ${p.numero}`);
  console.log(`\n‚ùì ${p.pregunta}\n`);
  
  p.opciones.forEach((opcion, i) => {
    const letra = String.fromCharCode(65 + i);
    console.log(`   ${letra}) ${opcion}`);
  });
  
  console.log('\nüí° [A/B/C/D] Responder | [ESPACIO] Saltar | [Q] Terminar');
  
  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.once('data', procesarTecla);
}

function procesarTecla(key) {
  const tecla = key.toString().toUpperCase();
  
  if (tecla === 'Q') {
    process.stdin.setRawMode(false);
    finalizarExamen();
    return;
  }
  
  if (tecla === ' ') {
    estadoActual.saltadas++;
    estadoActual.respuestas.push({ 
      pregunta: estadoActual.preguntaActual, 
      respuesta: null, 
      saltada: true 
    });
    estadoActual.preguntaActual++;
    mostrarPreguntaActual();
    return;
  }
  
  if (['A', 'B', 'C', 'D'].includes(tecla)) {
    const respuestaIndex = tecla.charCodeAt(0) - 65;
    const pregunta = estadoActual.preguntas[estadoActual.preguntaActual];
    const esCorrecta = respuestaIndex === pregunta.correcta;
    
    if (esCorrecta) {
      estadoActual.correctas++;
      estadoActual.puntuacion += 1;
    } else {
      estadoActual.incorrectas++;
      estadoActual.puntuacion -= 0.25;
    }
    
    estadoActual.respuestas.push({
      pregunta: estadoActual.preguntaActual,
      respuesta: respuestaIndex,
      correcta: esCorrecta,
      saltada: false
    });
    
    // Mostrar resultado
    process.stdin.setRawMode(false);
    const emoji = esCorrecta ? '‚úÖ' : '‚ùå';
    const letraCorrecta = String.fromCharCode(65 + pregunta.correcta);
    
    console.log(`\n${emoji} ${esCorrecta ? 'CORRECTO' : 'INCORRECTO'}`);
    console.log(`üéØ Respuesta correcta: ${letraCorrecta}) ${pregunta.opciones[pregunta.correcta]}`);
    console.log(`üí° ${pregunta.explicacion}`);
    console.log('\n‚è≥ Presiona ENTER para continuar...');
    
    estadoActual.preguntaActual++;
    esperarEnter().then(() => mostrarPreguntaActual());
    return;
  }
  
  process.stdin.once('data', procesarTecla);
}

function finalizarExamen() {
  process.stdin.setRawMode(false);
  
  const tiempoTotal = Math.round((Date.now() - estadoActual.inicio) / 60000);
  const totalPreguntas = estadoActual.preguntas.length;
  const porcentaje = totalPreguntas > 0 ? Math.round((estadoActual.correctas / totalPreguntas) * 100) : 0;
  const puntuacionFinal = Math.max(0, estadoActual.puntuacion);
  const notaFinal = (puntuacionFinal / totalPreguntas) * 10;
  
  console.clear();
  console.log('\nüèÜ EXAMEN FINALIZADO');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`üìä RESULTADOS DE ${MATERIA_CONFIG.nombre}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚è±Ô∏è  Tiempo total: ${tiempoTotal} minutos`);
  console.log(`üìù Preguntas respondidas: ${estadoActual.correctas + estadoActual.incorrectas}/${totalPreguntas}`);
  console.log(`‚úÖ Correctas: ${estadoActual.correctas}`);
  console.log(`‚ùå Incorrectas: ${estadoActual.incorrectas}`);
  console.log(`‚è≠Ô∏è  Saltadas: ${estadoActual.saltadas}`);
  console.log(`üìà Porcentaje acierto: ${porcentaje}%`);
  console.log(`üéØ Puntuaci√≥n final: ${puntuacionFinal.toFixed(2)}/${totalPreguntas}`);
  console.log(`üìä Nota final: ${notaFinal.toFixed(2)}/10`);
  
  const aprobado = notaFinal >= MATERIA_CONFIG.aprobado;
  console.log(`üéì Resultado: ${aprobado ? '‚úÖ APROBADO' : '‚ùå SUSPENSO'}`);
  
  // Guardar resultados
  const resultados = {
    fecha: new Date().toISOString(),
    tiempoMinutos: tiempoTotal,
    puntuacion: puntuacionFinal,
    nota: notaFinal,
    correctas: estadoActual.correctas,
    incorrectas: estadoActual.incorrectas,
    saltadas: estadoActual.saltadas,
    porcentaje: porcentaje,
    aprobado: aprobado
  };
  
  const archivoResultados = `resultados_${Date.now()}.json`;
  fs.writeFileSync(archivoResultados, JSON.stringify(resultados, null, 2));
  console.log(`\nüíæ Resultados guardados en: ${archivoResultados}`);
  
  process.exit(0);
}

function esperarEnter() {
  return new Promise(resolve => {
    rl.question('', () => resolve());
  });
}

// üöÄ Men√∫ principal
async function menuPrincipal() {
  console.clear();
  console.log('üéì SISTEMA DE EXAMEN PERSONALIZADO');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìñ Genera ex√°menes desde documentos de Google Docs');
  console.log('ü§ñ Opciones creadas autom√°ticamente con IA');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('Opciones disponibles:');
  console.log('1. üìö Generar nuevo examen');
  console.log('2. üìÇ Cargar examen existente');
  console.log('3. ‚ùå Salir');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  const respuesta = await new Promise(resolve => {
    rl.question('Selecciona una opci√≥n (1-3): ', resolve);
  });
  
  switch(respuesta) {
    case '1':
      const numPreg = await new Promise(resolve => {
        rl.question(`N√∫mero de preguntas (m√°ximo ${MATERIA_CONFIG.maxPreguntas}): `, resolve);
      });
      const preguntas = await generarExamenCompleto(parseInt(numPreg) || MATERIA_CONFIG.maxPreguntas);
      if (preguntas) {
        await iniciarExamenInteractivo(preguntas);
      } else {
        console.log('‚ùå No se pudo generar el examen. Presiona ENTER para continuar...');
        await esperarEnter();
        menuPrincipal();
      }
      break;
    
    case '2':
      await cargarExamenExistente();
      break;
      
    case '3':
      console.log('üëã ¬°Hasta luego!');
      rl.close();
      process.exit(0);
      break;
      
    default:
      console.log('‚ùå Opci√≥n no v√°lida. Presiona ENTER para continuar...');
      await esperarEnter();
      menuPrincipal();
      break;
  }
}

async function cargarExamenExistente() {
  try {
    console.log('\nüìÇ Buscando ex√°menes guardados...');
    const archivos = fs.readdirSync('.').filter(archivo => 
      archivo.startsWith('examen_') && archivo.endsWith('.json')
    );
    
    if (archivos.length === 0) {
      console.log('‚ùå No se encontraron ex√°menes guardados.');
      console.log('‚è≥ Presiona ENTER para volver al men√∫...');
      await esperarEnter();
      menuPrincipal();
      return;
    }
    
    console.log('\nüìã Ex√°menes disponibles:');
    archivos.forEach((archivo, index) => {
      console.log(`${index + 1}. ${archivo}`);
    });
    
    const seleccion = await new Promise(resolve => {
      rl.question(`\nSelecciona un examen (1-${archivos.length}): `, resolve);
    });
    
    const indice = parseInt(seleccion) - 1;
    if (indice >= 0 && indice < archivos.length) {
      const contenido = fs.readFileSync(archivos[indice], 'utf8');
      const preguntas = JSON.parse(contenido);
      
      console.log(`‚úÖ Examen cargado: ${archivos[indice]}`);
      console.log(`üìä Preguntas: ${preguntas.length}`);
      await iniciarExamenInteractivo(preguntas);
    } else {
      console.log('‚ùå Selecci√≥n inv√°lida.');
      await esperarEnter();
      menuPrincipal();
    }
  } catch (error) {
    console.log('‚ùå Error cargando examen:', error.message);
    await esperarEnter();
    menuPrincipal();
  }
}

// üöÄ Funci√≥n principal
async function main() {
  try {
    // Verificar configuraci√≥n b√°sica
    if (!AI_API_KEY) {
      console.log('‚ùå Error: AI_API_KEY no configurada en .env');
      console.log('üí° Configura tu clave de API de IA en el archivo .env');
      process.exit(1);
    }
    
    if (!GOOGLE_DOCUMENT_ID) {
      console.log('‚ùå Error: GOOGLE_DOCUMENT_ID no configurado en .env');
      console.log('üí° Configura el ID de tu documento de Google Docs en el archivo .env');
      process.exit(1);
    }
    
    if (!fs.existsSync(path.join(__dirname, 'credentials.json'))) {
      console.log('‚ùå Error: credentials.json no encontrado');
      console.log('üí° Descarga el archivo de credenciales de Google Cloud Console');
      process.exit(1);
    }
    
    console.log('üöÄ Iniciando sistema de examen...');
    await menuPrincipal();
    
  } catch (error) {
    console.log('‚ùå Error cr√≠tico:', error.message);
    process.exit(1);
  }
}

// Manejo de salida limpia
process.on('SIGINT', () => {
  console.log('\n\nüëã Saliendo del sistema...');
  rl.close();
  process.exit(0);
});

// Ejecutar programa
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
}
